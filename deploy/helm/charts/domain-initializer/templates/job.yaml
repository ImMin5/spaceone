{{ if .Values.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: initialize-domain-{{ .Values.main.var.domain_name }}
  namespace: {{ .Values.global.namespace | default .Release.Namespace }}
  labels:
    helm.stargate.spaceone.dev/service: initialize-spaceone
{{ include "spaceone.labels" . | indent 4 }}
spec:
  activeDeadlineSeconds: 3000
  template:
    metadata:
      name: "{{ .Release.Name }}"
      labels:
        helm.stargate.spaceone.dev/service: initialize-spaceone
{{ include "spaceone.labels" . | indent 8 }}
    spec:
      restartPolicy: OnFailure
      initContainers:
        - name: job-0-msa-health-check
          image: networld/grpcurl
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          # runs for 15 seconds; echoes job name and timestamp
          command:
            - sh
            - -c
            - >
              cp /grpcurl /usr/local/bin/grpcurl;
              while true;
              do

                echo GRPC HealthCheck for microservices

                ! grpcurl -plaintext config:50051 spaceone.api.core.v1.ServerInfo/get_version;
                config=$?;

                ! grpcurl -plaintext identity:50051 spaceone.api.core.v1.ServerInfo/get_version;
                identity=$?;

                ! grpcurl -plaintext inventory:50051 spaceone.api.core.v1.ServerInfo/get_version;
                inventory=$?;

                ! grpcurl -plaintext monitoring:50051 spaceone.api.core.v1.ServerInfo/get_version;
                monitoring=$?;

                ! grpcurl -plaintext repository:50051 spaceone.api.core.v1.ServerInfo/get_version;
                repository=$?;

                ! grpcurl -plaintext plugin:50051 spaceone.api.core.v1.ServerInfo/get_version;
                plugin=$?;

                ! grpcurl -plaintext secret:50051 spaceone.api.core.v1.ServerInfo/get_version;
                secret=$?;

                ! grpcurl -plaintext statistics:50051 spaceone.api.core.v1.ServerInfo/get_version;
                statistics=$?;

                if [[ $(( $config * $identity * $inventory * $monitoring * $repository * $plugin * $secret * $statistics )) -ne 0 ]];
                then
                  echo "Success. All microservices are available."
                  sleep 30
                  break;
                else
                  echo "[Error] Failed to connect some microservices"
                fi

                sleep 1;
              done
        - name: job-1-spacectl-conf-writable
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          image: busybox
          command:
            - sh
            - -c
            - cp -r /root/initializer/spaceconfig/* /root/.spaceone
          volumeMounts:
            - mountPath: /root/.spaceone
              name: domain-writable-spacectl-conf

            - mountPath: /root/initializer/spaceconfig/environment.yml
              name: domain-spacectl-environment-conf
              subPath: environment.yml
            - mountPath: /root/initializer/spaceconfig/environments/helm-root.yml
              name: domain-spacectl-environment-conf
              subPath: helm-root.yml

      containers:
      - name: job-2-initialize-spaceone
        image: {{ .Values.image.repository }}/{{ .Values.image.name }}:{{ .Values.image.version }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        command:
          - spacectl
          - apply
          - main.yaml
        volumeMounts:
          - mountPath: /root/initialize.sh
            name: domain-start-script-conf
            subPath: initialize.sh

          - mountPath: /root/.spaceone
            name: domain-writable-spacectl-conf
          - mountPath: /root/spacectl/apply
            name: domain-spacectl-apply-files-conf
          - mountPath: /root/main.yaml
            name: domain-spacectl-main-conf
            subPath: main.yaml

      volumes:
        - name: domain-start-script-conf
          configMap:
            name: start-script-conf
        - name: domain-spacectl-environment-conf
          configMap:
            name: domain-spacectl-environment-conf
        - name: domain-writable-spacectl-conf
          emptyDir: {}
        - name: domain-spacectl-apply-files-conf
          configMap:
            name: domain-spacectl-apply-files-conf
        - name: domain-spacectl-main-conf
          configMap:
            name: domain-spacectl-main-conf
{{ end }}
